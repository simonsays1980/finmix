% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcmcoutputpermhierpost.R
\name{plotTraces}
\alias{plotTraces}
\title{Plots traces of MCMC sampling}
\arguments{
\item{x}{An \code{mcmcoutput} or \code{mcmcoutputperm} object containing all sampled
values.}

\item{dev}{A logical indicating, if the plots should be shown by a graphical
device. If plots should be stored to a file set \code{dev} to \code{FALSE}.}

\item{lik}{An integer indicating, if the log-likelihood traces should be
plotted (default). If set to \code{0} the traces for the parameters
and weights are plotted instead.}

\item{col}{A logical indicating, if the plot should be colored.}

\item{...}{Further arguments to be passed to the plotting function.}
}
\value{
A plot of the traces of the MCMC samples.
}
\description{
\code{plotTraces()} is a class method for \link[=mcmcoutput-class]{mcmcoutput} and
\link[=mcmcoutputperm-class]{mcmcoutputperm} objects. For the former class it
plots the traces of MCMC samples and for the latter of the corresponding
permuted samples coming from relabeling.
}
\details{
Calling \code{\link[=plotTraces]{plotTraces()}} with \code{lik} set to \code{1}, plots the MCMC traces of the
mixture log-likelihood, the mixture log-likelihood of the prior
distribution, or the log-likelihood of the complete data posterior, if the
model has unknown indicators.

If \code{lik} is set to \code{0} the parameters of the components, the posterior
parameters, and the parameters of the hierarchical prior are plotted
together with \code{K-1} weights.
\subsection{Hierarchical priors}{

In case of hierarchical priors, the function also plots traces from the
sampled hierarchical prior's parameters, in case \code{lik} is set to \code{1}.
}

\subsection{Posterior density parameters}{

In case posterior density parameters had been stored in MCMC sampling, the
traces of these parameters are added to the plot.
}
}
\examples{
# Define a Poisson mixture model with two components.
f_model <- model("poisson", par = list(lambda = c(0.3, 1.2)), K = 2)
# Simulate data from the mixture model.
f_data <- simulate(f_model)
# Define the hyper-parameters for MCMC sampling.
f_mcmc <- mcmc(storepost = FALSE)
# Define the prior distribution by relying on the data.
f_prior <- priordefine(f_data, f_model)
# Do not use a hierarchical prior.
setHier(f_prior) <- FALSE
# Start MCMC sampling.
f_output <- mixturemcmc(f_data, f_model, f_prior, f_mcmc)
f_outputperm <- mcmcpermute(f_output)
plotTraces(f_outputperm, lik = 0)

}
\seealso{
\itemize{
\item \code{\link[=mixturemcmc]{mixturemcmc()}} for performing MCMC sampling
\item \code{\link[=mcmcpermute]{mcmcpermute()}} for permuting MCMC samples
\item \code{\link[=plotHist]{plotHist()}} for plotting histograms of sampled values
\item \code{\link[=plotDens]{plotDens()}} for plotting densities of sampled values
\item \code{\link[=plotSampRep]{plotSampRep()}} for plotting sampling representations of sampled values
\item \code{\link[=plotPointProc]{plotPointProc()}} for plotting point processes for sampled values
\item \code{\link[=plotPostDens]{plotPostDens()}} for plotting the posterior density of component parameters
\item \linkS4class{mcmcoutput} for the class definition of \code{mcmcoutput}
\item \linkS4class{mcmcoutputperm} for the class definition of \code{mcmcoutputperm}
}
}
